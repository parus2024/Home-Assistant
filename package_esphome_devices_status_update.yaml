# made @krym_parus ¬©
# –°–æ–∑–¥–∞–π—Ç–µ —Å —ç—Ç–∏–º YAML-–∫–æ–¥ –ø–∞–∫–µ—Ç /homeassistant/packages/device_status.yaml  –∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –ø—É—Ç–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è packages
# –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∞–≤—Ç–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ESPHome –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ Home Assistant.
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã custom:multiple-entity-row –∏ custom:auto-entities
# –í —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö esphome –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ–Ω—Å–æ—Ä status, —Å–µ–Ω—Å–æ—Ä—ã –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
######### –í—Å—Ç–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –Ω–∏–∂–µ –¥–ª—è Developer Tools ‚Üí Templates, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç YAML –¥–ª—è input_boolean, –∫–æ—Ç–æ–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º package
#{% for entity in states.sensor
#   | selectattr('entity_id', 'search', 'esphome_version')
#%}
#  {{ entity.entity_id.replace('sensor.', '').replace('_esphome_version', '') }}_esphome_update:
#    name: "Update {{ entity.entity_id.replace('sensor.', '').replace('_esphome_version', '') }}"
#{% endfor %}
#              | rejectattr('entity_id', 'equalto', 'input_boolean.esphome_update')
#########
  input_button:
    update_esphome:
      name: update_esphome
  input_text:
    sorted_devices:
      name: Sorted ESPHome Devices
      max: 255
  input_select:
    esphome_sort_by:
      name: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      options:
        - entity_id
        - friendly_name
      initial: entity_id
  automation:
    - alias: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ESPHome –ø–æ –∫–Ω–æ–ø–∫–µ
      trigger:
        - platform: state
          entity_id: input_button.update_esphome
      action:
        - service: script.update_selected_esphome_sequential
    - alias: "Sync choose_all with all update input_booleans"
      description: >
        –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ choose_all –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ input_boolean —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _update,
        –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ ‚Äî –≤—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ.
        –ï—Å–ª–∏ choose_all –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω.
      trigger:
        - platform: state
          entity_id: input_boolean.choose_all
      action:
        - variables:
            all_update_bools: >
              {{ states.input_boolean
                 | selectattr('entity_id', 'search', '_esphome_update$')
                 | rejectattr('entity_id', 'equalto', 'input_boolean.choose_all')
                 | map(attribute='entity_id')
                 | list }}
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.choose_all
                  state: 'on'
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: "{{ all_update_bools }}"
            - conditions:
                - condition: state
                  entity_id: input_boolean.choose_all
                  state: 'off'
              sequence:
                - service: input_boolean.turn_off
                  target:
                    entity_id: "{{ all_update_bools }}"

  script:
    update_selected_esphome_sequential:
      alias: Update Selected ESPHome Sequentially
      mode: single
      variables:
        devices: >
          {%- set update_booleans = states.input_boolean
              | selectattr('entity_id', 'search', '_esphome_update')
              | list -%}

          {%- set ns = namespace(update_entities_str='') -%}

          {%- for entity in update_booleans -%}
            {%- set entity_id = entity.entity_id -%}
            {%- set base = entity_id.split('.')[1].replace('_esphome_update', '') -%}
            {%- set update_entity = 'update.' + base + '_firmware' -%}
            {%- if entity.state == 'on' and states(update_entity) == 'on' -%}
              {%- if ns.update_entities_str == '' -%}
                {%- set ns.update_entities_str = update_entity -%}
              {%- else -%}
                {%- set ns.update_entities_str = ns.update_entities_str + ',' + update_entity -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}

          {# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ #}
          {%- if ns.update_entities_str == '' -%}
            []
          {%- else -%}
            {{ ns.update_entities_str.split(',') }}
          {%- endif -%}
        success_devices: []
        message: >
          –ù–∞—á–∞—Ç–æ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö {{ devices | length }} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ESPHome: {{ devices }}
          –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
      sequence:
        - condition: template
          value_template: "{{ devices | length > 0 }}"
        - service: persistent_notification.create
          data:
            title: "ESPHome Update"
            message: "{{ message }}"
        - repeat:
            for_each: "{{ devices }}"
            sequence:
              - condition: state
                entity_id: input_boolean.stop_update
                state: 'off'
              # –°–æ–∑–¥–∞–µ–º helper –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.first_timeout_processed
              - service: script.turn_on
                target:
                  entity_id: script.start_update
                data:
                  variables:
                    entity_id: "{{ repeat.item }}"
              - delay:
                  seconds: 3
               # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω input_boolean.esphome_log
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: input_boolean.esphome_log
                        state: 'on'
                    sequence:
                      - service: persistent_notification.create
                        data:
                          title: "ESPHome Update"
                          message: >
                            –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {{ repeat.item }}.|
                            –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ<<: {{ repeat.item }} |
                            In_progress: {{ state_attr(repeat.item, 'in_progress') }}|
                            State: {{ states(repeat.item) }} >> |
                            –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.

              # üîπ –ü–µ—Ä–≤—ã–π —Ç–∞–π–º–∞—É—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã)
              - wait_template: >
                  {{ state_attr(repeat.item, 'in_progress') == false }}
                timeout: '00:02:00'
                continue_on_timeout: true
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
              - choose:
                  - conditions:
                      # (1)‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ
                      - condition: template
                        value_template: >
                          {{ state_attr(repeat.item, 'in_progress') == true }}
                    sequence:
                      # üîπ –í—Ç–æ—Ä–æ–π —Ç–∞–π–º–∞—É—Ç: –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (25 –º–∏–Ω—É—Ç)
                      - service: input_boolean.turn_on
                        target:
                          entity_id: input_boolean.first_timeout_processed
                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω input_boolean.esphome_log
                      - choose:
                          - conditions:
                              - condition: state
                                entity_id: input_boolean.esphome_log
                                state: 'on'
                            sequence:
                              - service: persistent_notification.create
                                data:
                                  title: "ESPHome Update"
                                  message: >
                                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {{ repeat.item }} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ.| 
                                    –§–ª–∞–≥ {{ states('input_boolean.first_timeout_processed') }}. –ñ–¥–µ–º 25 –º–∏–Ω—É—Ç.
                                    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:<< {{ repeat.item }} |
                                    in_progress: {{ state_attr(repeat.item, 'in_progress') }} |
                                    State: {{ states(repeat.item) }} >>
                                    –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
                      - wait_template: >
                          {{ state_attr(repeat.item, 'in_progress') == false and is_state(repeat.item, 'off') }}
                        timeout: '00:25:00'
                        continue_on_timeout: true
                      # –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                      - choose:
                          - conditions:
                              # ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                              - condition: template
                                value_template: >
                                  {{ is_state(repeat.item, 'off') }}
#                                  {{ state_attr(repeat.item, 'in_progress') == false and is_state(repeat.item, 'off') }}
                            sequence:
                              - variables:
                                  success_devices: "{{ success_devices + [repeat.item] }}"
                              - condition: state
                                entity_id: input_boolean.esphome_log
                                state: 'on'
                              - service: persistent_notification.create
                                data:
                                  title: "ESPHome Update"
                                  message: >
                                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
                                    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:<< {{ repeat.item }} |
                                    in_progress: {{ state_attr(repeat.item, 'in_progress') }} |
                                    State: {{ states(repeat.item) }} >>
                                    –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
                          - conditions:
                              # ‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π 
                              - condition: template
                                value_template: >
                                  {{ state_attr(repeat.item, 'in_progress') == false 
                                     and is_state(repeat.item, 'on')
                                     and is_state('input_boolean.first_timeout_processed', 'on')
                                     and (as_timestamp(now()) - as_timestamp(states[repeat.item].last_changed)) >= 60 }}
#                                  {{ state_attr(repeat.item, 'in_progress') == false and is_state(repeat.item, 'on') }}
                            sequence:
                              - condition: state
                                entity_id: input_boolean.esphome_log
                                state: 'on'
                              - service: persistent_notification.create
                                data:
                                  title: "ESPHome Update"
                                  message: >
                                    –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.
                                    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:<< {{ repeat.item }} |
                                    In_progress: {{ state_attr(repeat.item, 'in_progress') }} |
                                    State: {{ states(repeat.item) }} >>
                                    –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
                          - conditions:
                              # ‚è∞ –¢–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                              - condition: template
                                value_template: >
                                  {{ state_attr(repeat.item, 'in_progress') == true }}
                            sequence:
                              - condition: state
                                entity_id: input_boolean.esphome_log
                                state: 'on'
                              - service: persistent_notification.create
                                data:
                                  title: "ESPHome Update"
                                  message: >
                                    –ò—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç 25–º–∏–Ω –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
                                    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:<< {{ repeat.item }} |
                                    in_progress: {{ state_attr(repeat.item, 'in_progress') }} |
                                    State: {{ states(repeat.item) }} >>
                                    –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
                  - conditions:
                      # (2)‚ùå ‚è∞ –¢–∞–π–º–∞—É—Ç–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å (–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ç.–ø.)
                      - condition: template
                        value_template: >
                          {{ state_attr(repeat.item, 'in_progress') == false 
                             and is_state(repeat.item, 'on')
                             and is_state('input_boolean.first_timeout_processed', 'off')
                             and (as_timestamp(now()) - as_timestamp(states[repeat.item].last_changed)) >= 60 }}
#                          {{ state_attr(repeat.item, 'in_progress') == false 
#                             and is_state(repeat.item, 'on')
#                             and is_state('input_boolean.first_timeout_processed', 'off') }}
                    sequence:
                      - condition: state
                        entity_id: input_boolean.esphome_log
                        state: 'on'
                      - service: persistent_notification.create
                        data:
                          title: "ESPHome Update"
                          message: >
                            –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
                            –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:<< {{ repeat.item }} |
                            In_progress: {{ state_attr(repeat.item, 'in_progress') }} |
                            State: {{ states(repeat.item) }} >>
                            –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
        - service: persistent_notification.create
          data:
            title: "ESPHome Update"
            message: >
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
              {% if success_devices | length > 0 %}
              –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {{ success_devices | length }} |
              {% for dev in success_devices %}
              << {{ dev }} >>
              {% endfor %}
              {% else %}
              –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
              {% endif %}
              –í—Ä–µ–º—è: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
    start_update:
      alias: "Start ESPHome update"
      mode: single
      fields:
        entity_id:
          description: "Entity ID to update"
          example: "update.my_light_bulb"
      sequence:
        - service: update.install
          target:
            entity_id: "{{ entity_id }}"
  template:
    - sensor:   
        - name: status_esphome
          state: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if states(entity.entity_id)   
              and is_state_attr(entity.entity_id, 'device_class', 'connectivity') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {% if (variable.value | length) | int > 0 %}
              {{ variable.value | length }}
              {% else %}
               0
              {% endif %}
        - name: status_esphome_off
          state: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if is_state(entity.entity_id, 'off')   
              and is_state_attr(entity.entity_id, 'device_class', 'connectivity') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {% if (variable.value | length) | int > 0 %}
              {{ variable.value | length }}
              {% else %}
               0
              {% endif %}
          attributes:
            list_entities: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if is_state(entity.entity_id, 'off')   
                and is_state_attr(entity.entity_id, 'device_class', 'connectivity') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {{ variable.value |dictsort(false, 'value') }}
        - name: status_zigbee
          state: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if states(entity.entity_id)   
              and is_state_attr(entity.entity_id, 'device_class', 'problem') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {% if (variable.value | length) | int > 0 %}
              {{ variable.value | length }}
              {% else %}
               0
              {% endif %}
        - name: status_zigbee_off
          state: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on')   
              and is_state_attr(entity.entity_id, 'device_class', 'problem') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {% if (variable.value | length) | int > 0 %}
              {{ variable.value | length }}
              {% else %}
               0
              {% endif %}
          attributes:
            list_entities: >
              {% set variable = namespace(value = {}) %}
              {% for entity in states.binary_sensor if is_state(entity.entity_id, 'on')   
                and is_state_attr(entity.entity_id, 'device_class', 'problem') %}
               {% set variable.value = dict(variable.value, **{entity.name: entity.state }) %}
              {% endfor %}
              {{ variable.value |dictsort(false, 'value') }}
  input_boolean:
    show_uptime:
      name: Show Uptime
      initial: true
    show_wifi:
      name: Show WiFi
      initial: true
    show_ip:
      name: Show IP
      initial: true
    show_reboot:
      name: Show Reboot
      initial: true
    show_lqi:
      name: Show lqi
      initial: true
    show_battery:
      name: Show Battery
      initial: true
    show_last_seen:
      name: Show last seen
      initial: true
    show_update:
      name: "Show Update"
    stop_update:
      name: Stop Update
    choose_all:
      name: choose_all
    first_timeout_processed:
      name: first_timeout_processed
    esphome_log:
      name: esphome_log
##### —Ç—É—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å input_boolean –Ω–∞ –∫–∞–∂–¥–æ–µ –í–ê–®–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - All devices —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–∞!#####
    device1_esphome_update:
      name: "Update device1"

    device2_esphome_update:
      name: "Update device2"

    device3_esphome_update:
      name: "Update device3"
